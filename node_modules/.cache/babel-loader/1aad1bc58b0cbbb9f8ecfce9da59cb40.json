{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, FETCH_USERS_FAILURE, GETALL_TODO_REQUEST, GETALL_TODO_SUCCESS, GETALL_TODO_FAILURE } from './actionType';\nexport const fetchUser = () => {\n  return dispatch => {\n    dispatch(fetchUsersRequest()); // axios.get('https://jsonplaceholder.typicode.com/users')\n\n    axios({\n      url: 'http://localhost:3005/users',\n      method: 'GET'\n    }).then(response => {\n      const users = response.data;\n      dispatch(fetchUsersSuccess(users));\n    }).catch(error => {\n      dispatch(fetchUsersFailure(error.message));\n    });\n  };\n};\nexport const fetchUsersRequest = () => {\n  return {\n    type: FETCH_USERS_REQUEST\n  };\n};\nexport const fetchUsersSuccess = users => {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: users\n  };\n};\nexport const fetchUsersFailure = error => {\n  return {\n    type: FETCH_USERS_FAILURE,\n    payload: error\n  };\n}; ///////// Delete particular User //////\n\nexport const deleteUser = id => {\n  return;\n};\nexport const getAllTodo = () => {\n  return dispatch => {\n    dispatch(getAllTodoRequest());\n    axios({\n      url: 'http://localhost:3005/todos',\n      method: 'GET'\n    }).then(response => {\n      const todos = response.data;\n      dispatch(getAllTodoSuccess(todos));\n    }).catch(error => {\n      dispatch(getAllTodoFailure(error.message));\n    });\n  };\n};\nexport const getAllTodoRequest = () => {\n  return {\n    type: GETALL_TODO_REQUEST\n  };\n};\nexport const getAllTodoSuccess = todos => {\n  return {\n    type: GETALL_TODO_SUCCESS,\n    payload: todos\n  };\n};\nexport const getAllTodoFailure = error => {\n  return {\n    type: GETALL_TODO_FAILURE,\n    payload: error\n  };\n};","map":{"version":3,"sources":["/home/rails/reduxmahima/reduxjsonserver/src/actions/index.js"],"names":["axios","FETCH_USERS_REQUEST","FETCH_USERS_SUCCESS","FETCH_USERS_FAILURE","GETALL_TODO_REQUEST","GETALL_TODO_SUCCESS","GETALL_TODO_FAILURE","fetchUser","dispatch","fetchUsersRequest","url","method","then","response","users","data","fetchUsersSuccess","catch","error","fetchUsersFailure","message","type","payload","deleteUser","id","getAllTodo","getAllTodoRequest","todos","getAllTodoSuccess","getAllTodoFailure"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,mBAAT,EAA8BC,mBAA9B,EAAmDC,mBAAnD,EACEC,mBADF,EACsBC,mBADtB,EAC2CC,mBAD3C,QAEO,cAFP;AAIA,OAAO,MAAMC,SAAS,GAAG,MAAM;AAC7B,SAAQC,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACC,iBAAiB,EAAlB,CAAR,CADmB,CAEnB;;AACET,IAAAA,KAAK,CAAC;AACJU,MAAAA,GAAG,EAAE,6BADD;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KAAD,CAAL,CAICC,IAJD,CAIMC,QAAQ,IAAI;AAChB,YAAMC,KAAK,GAAGD,QAAQ,CAACE,IAAvB;AACAP,MAAAA,QAAQ,CAACQ,iBAAiB,CAACF,KAAD,CAAlB,CAAR;AACD,KAPD,EAQCG,KARD,CAQOC,KAAK,IAAI;AACdV,MAAAA,QAAQ,CAACW,iBAAiB,CAACD,KAAK,CAACE,OAAP,CAAlB,CAAR;AACD,KAVD;AAWH,GAdD;AAeD,CAhBM;AAkBP,OAAO,MAAMX,iBAAiB,GAAG,MAAM;AACrC,SAAO;AACLY,IAAAA,IAAI,EAAEpB;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMe,iBAAiB,GAAGF,KAAK,IAAI;AACxC,SAAO;AACLO,IAAAA,IAAI,EAAEnB,mBADD;AAELoB,IAAAA,OAAO,EAAER;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMK,iBAAiB,GAAGD,KAAK,IAAI;AACxC,SAAO;AACLG,IAAAA,IAAI,EAAElB,mBADD;AAELmB,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CALM,C,CAMP;;AAEA,OAAO,MAAMK,UAAU,GAAIC,EAAD,IAAQ;AAChC;AACD,CAFM;AAIP,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC9B,SAAQjB,QAAD,IAAc;AACnBA,IAAAA,QAAQ,CAACkB,iBAAiB,EAAlB,CAAR;AACE1B,IAAAA,KAAK,CAAC;AACJU,MAAAA,GAAG,EAAE,6BADD;AAEJC,MAAAA,MAAM,EAAE;AAFJ,KAAD,CAAL,CAICC,IAJD,CAIMC,QAAQ,IAAI;AAChB,YAAMc,KAAK,GAAGd,QAAQ,CAACE,IAAvB;AACAP,MAAAA,QAAQ,CAACoB,iBAAiB,CAACD,KAAD,CAAlB,CAAR;AACD,KAPD,EAQCV,KARD,CAQOC,KAAK,IAAI;AACdV,MAAAA,QAAQ,CAACqB,iBAAiB,CAACX,KAAK,CAACE,OAAP,CAAlB,CAAR;AACD,KAVD;AAWH,GAbD;AAcD,CAfM;AAiBP,OAAO,MAAMM,iBAAiB,GAAG,MAAM;AACrC,SAAO;AACLL,IAAAA,IAAI,EAAEjB;AADD,GAAP;AAGD,CAJM;AAMP,OAAO,MAAMwB,iBAAiB,GAAGD,KAAK,IAAI;AACxC,SAAO;AACLN,IAAAA,IAAI,EAAEhB,mBADD;AAELiB,IAAAA,OAAO,EAAEK;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAME,iBAAiB,GAAGX,KAAK,IAAI;AACxC,SAAO;AACLG,IAAAA,IAAI,EAAEf,mBADD;AAELgB,IAAAA,OAAO,EAAEJ;AAFJ,GAAP;AAID,CALM","sourcesContent":["import axios from 'axios'\nimport { FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, FETCH_USERS_FAILURE,\n  GETALL_TODO_REQUEST,GETALL_TODO_SUCCESS, GETALL_TODO_FAILURE,\n} from './actionType'\n\nexport const fetchUser = () => {\n  return (dispatch) => {\n    dispatch(fetchUsersRequest())\n    // axios.get('https://jsonplaceholder.typicode.com/users')\n      axios({\n        url :'http://localhost:3005/users' ,\n        method :'GET',\n      })\n      .then(response => {\n        const users = response.data\n        dispatch(fetchUsersSuccess(users))\n      })\n      .catch(error => {\n        dispatch(fetchUsersFailure(error.message))\n      })\n  }\n}\n\nexport const fetchUsersRequest = () => {\n  return {\n    type: FETCH_USERS_REQUEST\n  }\n}\n\nexport const fetchUsersSuccess = users => {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    payload: users\n  }\n}\n\nexport const fetchUsersFailure = error => {\n  return {\n    type: FETCH_USERS_FAILURE,\n    payload: error\n  }\n}\n///////// Delete particular User //////\n\nexport const deleteUser = (id) => {\n  return \n}\n\nexport const getAllTodo = () => {\n  return (dispatch) => {\n    dispatch(getAllTodoRequest())\n      axios({\n        url :'http://localhost:3005/todos' ,\n        method :'GET',\n      })\n      .then(response => {\n        const todos = response.data\n        dispatch(getAllTodoSuccess(todos))\n      })\n      .catch(error => {\n        dispatch(getAllTodoFailure(error.message))\n      })\n  }\n}\n\nexport const getAllTodoRequest = () => {\n  return {\n    type: GETALL_TODO_REQUEST\n  }\n}\n\nexport const getAllTodoSuccess = todos => {\n  return {\n    type: GETALL_TODO_SUCCESS,\n    payload: todos\n  }\n}\n\nexport const getAllTodoFailure = error => {\n  return {\n    type: GETALL_TODO_FAILURE,\n    payload: error\n  }\n}\n"]},"metadata":{},"sourceType":"module"}